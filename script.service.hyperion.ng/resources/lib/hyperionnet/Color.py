# automatically generated by the FlatBuffers compiler, do not modify

# namespace: hyperionnet

import flatbuffers

class Color(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsColor(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Color()
        x.Init(buf, n + offset)
        return x

    # Color
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Color
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # Color
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

def ColorStart(builder): builder.StartObject(2)
def ColorAddData(builder, data): builder.PrependInt32Slot(0, data, -1)
def ColorAddDuration(builder, duration): builder.PrependInt32Slot(1, duration, -1)
def ColorEnd(builder): return builder.EndObject()
