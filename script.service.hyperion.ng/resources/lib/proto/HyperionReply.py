# automatically generated by the FlatBuffers compiler, do not modify

# namespace: proto

import flatbuffers

class HyperionReply(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHyperionReply(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HyperionReply()
        x.Init(buf, n + offset)
        return x

    # HyperionReply
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HyperionReply
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # HyperionReply
    def Success(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

    # HyperionReply
    def Error(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # HyperionReply
    def Video(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def HyperionReplyStart(builder): builder.StartObject(4)
def HyperionReplyAddType(builder, type): builder.PrependInt32Slot(0, type, 0)
def HyperionReplyAddSuccess(builder, success): builder.PrependBoolSlot(1, success, 0)
def HyperionReplyAddError(builder, error): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(error), 0)
def HyperionReplyAddVideo(builder, video): builder.PrependInt32Slot(3, video, 0)
def HyperionReplyEnd(builder): return builder.EndObject()
