# automatically generated by the FlatBuffers compiler, do not modify

# namespace: proto

import flatbuffers

class ImageRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsImageRequest(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ImageRequest()
        x.Init(buf, n + offset)
        return x

    # ImageRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ImageRequest
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ImageRequest
    def Imagewidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ImageRequest
    def Imageheight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ImageRequest
    def Imagedata(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ImageRequest
    def ImagedataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ImageRequest
    def ImagedataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ImageRequest
    def Duration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ImageRequestStart(builder): builder.StartObject(5)
def ImageRequestAddPriority(builder, priority): builder.PrependInt32Slot(0, priority, 0)
def ImageRequestAddImagewidth(builder, imagewidth): builder.PrependInt32Slot(1, imagewidth, 0)
def ImageRequestAddImageheight(builder, imageheight): builder.PrependInt32Slot(2, imageheight, 0)
def ImageRequestAddImagedata(builder, imagedata): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(imagedata), 0)
def ImageRequestStartImagedataVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def ImageRequestAddDuration(builder, duration): builder.PrependInt32Slot(4, duration, 0)
def ImageRequestEnd(builder): return builder.EndObject()
